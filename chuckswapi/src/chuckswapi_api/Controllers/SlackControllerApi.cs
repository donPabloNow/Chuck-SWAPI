/*
 * Chuck Norris IO
 *
 * chucknorris.io is a free JSON API for hand curated Chuck Norris facts.  Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.  Chuck Norris facts have spread around the world, leading not only to translated versions, but also spawning localized versions mentioning country-specific advertisements and other Internet phenomena. Allusions are also sometimes made to his use of roundhouse kicks to perform seemingly any task, his large amount of body hair with specific regard to his beard, and his role in the action television series Walker, Texas Ranger.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: m@matchilling.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using chuckswapi_api.Attributes;

using Microsoft.AspNetCore.Authorization;
using chuckswapi_api.Models;

namespace chuckswapi_api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SlackControllerApiController : ControllerBase
    { 
        /// <summary>
        /// command
        /// </summary>
        
        /// <param name="channelId"></param>
        /// <param name="channelName"></param>
        /// <param name="command"></param>
        /// <param name="enterpriseId"></param>
        /// <param name="enterpriseName"></param>
        /// <param name="responseUrl"></param>
        /// <param name="teamDomain"></param>
        /// <param name="teamId"></param>
        /// <param name="text"></param>
        /// <param name="token"></param>
        /// <param name="triggerId"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//jokes/slack")]
        [ValidateModelState]
        [SwaggerOperation("CommandUsingPOST")]
        [SwaggerResponse(statusCode: 200, type: typeof(SlackCommandResponse), description: "OK")]
        public virtual IActionResult CommandUsingPOST([FromForm]string channelId, [FromForm]string channelName, [FromForm]string command, [FromForm]string enterpriseId, [FromForm]string enterpriseName, [FromForm]string responseUrl, [FromForm]string teamDomain, [FromForm]string teamId, [FromForm]string text, [FromForm]string token, [FromForm]string triggerId, [FromForm]string userId, [FromForm]string userName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SlackCommandResponse));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"icon_url\" : \"icon_url\",\n  \"attachments\" : [ {\n    \"mrkdown_in\" : [ \"mrkdown_in\", \"mrkdown_in\" ],\n    \"title_link\" : \"title_link\",\n    \"text\" : \"text\",\n    \"title\" : \"title\",\n    \"fallback\" : \"fallback\"\n  }, {\n    \"mrkdown_in\" : [ \"mrkdown_in\", \"mrkdown_in\" ],\n    \"title_link\" : \"title_link\",\n    \"text\" : \"text\",\n    \"title\" : \"title\",\n    \"fallback\" : \"fallback\"\n  } ],\n  \"response_type\" : \"response_type\",\n  \"text\" : \"text\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SlackCommandResponse>(exampleJson)
            : default(SlackCommandResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
