/*
 * Chuck Norris IO
 *
 * chucknorris.io is a free JSON API for hand curated Chuck Norris facts.  Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.  Chuck Norris facts have spread around the world, leading not only to translated versions, but also spawning localized versions mentioning country-specific advertisements and other Internet phenomena. Allusions are also sometimes made to his use of roundhouse kicks to perform seemingly any task, his large amount of body hair with specific regard to his beard, and his role in the action television series Walker, Texas Ranger.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: m@matchilling.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace chuckswapi_api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SlackCommandResponseAttachment : IEquatable<SlackCommandResponseAttachment>
    { 
        /// <summary>
        /// Gets or Sets Fallback
        /// </summary>
        [DataMember(Name="fallback")]
        public string Fallback { get; set; }

        /// <summary>
        /// Gets or Sets MrkdownIn
        /// </summary>
        [DataMember(Name="mrkdown_in")]
        public List<string> MrkdownIn { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TitleLink
        /// </summary>
        [DataMember(Name="title_link")]
        public string TitleLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlackCommandResponseAttachment {\n");
            sb.Append("  Fallback: ").Append(Fallback).Append("\n");
            sb.Append("  MrkdownIn: ").Append(MrkdownIn).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TitleLink: ").Append(TitleLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SlackCommandResponseAttachment)obj);
        }

        /// <summary>
        /// Returns true if SlackCommandResponseAttachment instances are equal
        /// </summary>
        /// <param name="other">Instance of SlackCommandResponseAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlackCommandResponseAttachment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Fallback == other.Fallback ||
                    Fallback != null &&
                    Fallback.Equals(other.Fallback)
                ) && 
                (
                    MrkdownIn == other.MrkdownIn ||
                    MrkdownIn != null &&
                    MrkdownIn.SequenceEqual(other.MrkdownIn)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    TitleLink == other.TitleLink ||
                    TitleLink != null &&
                    TitleLink.Equals(other.TitleLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Fallback != null)
                    hashCode = hashCode * 59 + Fallback.GetHashCode();
                    if (MrkdownIn != null)
                    hashCode = hashCode * 59 + MrkdownIn.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (TitleLink != null)
                    hashCode = hashCode * 59 + TitleLink.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SlackCommandResponseAttachment left, SlackCommandResponseAttachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SlackCommandResponseAttachment left, SlackCommandResponseAttachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
