/*
 * Chuck SWAPI API
 *
 * .NET CORE C# Chuck SWAPI Project API.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: don@obeyi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace chuckswapi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Jokes : IEquatable<Jokes>
    { 
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories")]
        public List<string> Categories { get; set; }

        /// <summary>
        /// 2020-01-05 13:42:19.576875
        /// </summary>
        /// <value>2020-01-05 13:42:19.576875</value>
        [DataMember(Name="created_at")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// https://assets.chucknorris.host/img/avatar/chuck-norris.png
        /// </summary>
        /// <value>https://assets.chucknorris.host/img/avatar/chuck-norris.png</value>
        [DataMember(Name="icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// vxmg5zgusq6ra35ns4e5sw
        /// </summary>
        /// <value>vxmg5zgusq6ra35ns4e5sw</value>
        [DataMember(Name="id")]
        public decimal? Id { get; set; }

        /// <summary>
        /// 2020-01-05 13:42:19.576875
        /// </summary>
        /// <value>2020-01-05 13:42:19.576875</value>
        [DataMember(Name="updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// https://api.chucknorris.io/jokes/vxmg5zgusq6ra35ns4e5sw
        /// </summary>
        /// <value>https://api.chucknorris.io/jokes/vxmg5zgusq6ra35ns4e5sw</value>
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// After returning from World War 2 unscrathed, Bob Dole was congratulated by Chuck Norris with a handshake. The rest is history.
        /// </summary>
        /// <value>After returning from World War 2 unscrathed, Bob Dole was congratulated by Chuck Norris with a handshake. The rest is history.</value>
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Jokes {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Jokes)obj);
        }

        /// <summary>
        /// Returns true if Jokes instances are equal
        /// </summary>
        /// <param name="other">Instance of Jokes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Jokes other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    IconUrl == other.IconUrl ||
                    IconUrl != null &&
                    IconUrl.Equals(other.IconUrl)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (IconUrl != null)
                    hashCode = hashCode * 59 + IconUrl.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Jokes left, Jokes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Jokes left, Jokes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
